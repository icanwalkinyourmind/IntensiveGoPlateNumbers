// Code generated by MockGen. DO NOT EDIT.
// Source: http.go

package server

import (
	gomock "github.com/golang/mock/gomock"
	workers "github.com/jirfag/gointensive/lec3/2_http_pool/workers"
	reflect "reflect"
	time "time"
)

// MockIPool is a mock of IPool interface
type MockIPool struct {
	ctrl     *gomock.Controller
	recorder *MockIPoolMockRecorder
}

// MockIPoolMockRecorder is the mock recorder for MockIPool
type MockIPoolMockRecorder struct {
	mock *MockIPool
}

// NewMockIPool creates a new mock instance
func NewMockIPool(ctrl *gomock.Controller) *MockIPool {
	mock := &MockIPool{ctrl: ctrl}
	mock.recorder = &MockIPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockIPool) EXPECT() *MockIPoolMockRecorder {
	return _m.recorder
}

// Size mocks base method
func (_m *MockIPool) Size() int {
	ret := _m.ctrl.Call(_m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (_mr *MockIPoolMockRecorder) Size() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Size", reflect.TypeOf((*MockIPool)(nil).Size))
}

// Run mocks base method
func (_m *MockIPool) Run() {
	_m.ctrl.Call(_m, "Run")
}

// Run indicates an expected call of Run
func (_mr *MockIPoolMockRecorder) Run() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Run", reflect.TypeOf((*MockIPool)(nil).Run))
}

// AddTaskSyncTimed mocks base method
func (_m *MockIPool) AddTaskSyncTimed(f workers.Func, timeout time.Duration) (interface{}, error) {
	ret := _m.ctrl.Call(_m, "AddTaskSyncTimed", f, timeout)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTaskSyncTimed indicates an expected call of AddTaskSyncTimed
func (_mr *MockIPoolMockRecorder) AddTaskSyncTimed(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AddTaskSyncTimed", reflect.TypeOf((*MockIPool)(nil).AddTaskSyncTimed), arg0, arg1)
}
